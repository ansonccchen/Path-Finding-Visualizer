{"version":3,"sources":["PathFinderVisualizer/TopBar/VisualizationOptions.tsx","components/Div.tsx","theme/index.ts","helpers/animations/animateAlgorithm.ts","helpers/algorithms/preSetupAlgorithm.ts","algorithms/dijkstra.ts","algorithms/dfs.ts","algorithms/bfs.ts","algorithms/aStar.ts","helpers/algorithms/selectAlgorithm.ts","images/iconPath.svg","PathFinderVisualizer/TopBar/LogoView.tsx","helpers/board/createBoard.ts","PathFinderVisualizer/TopBar/ClearButtons.tsx","types/algorithms.ts","PathFinderVisualizer/TopBar/TopBar.tsx","PathFinderVisualizer/InfoBar/InfoNodeView.tsx","PathFinderVisualizer/InfoBar/InfoBar.tsx","PathFinderVisualizer/Board/GridNode.tsx","PathFinderVisualizer/Board/NodeView.tsx","helpers/animations/animateInstantAlgorithm.ts","PathFinderVisualizer/Board/Board.tsx","PathFinderVisualizer/PathFinderVisualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Div","children","customClassName","className","forwardedRef","onClick","onMouseDown","onMouseEnter","onMouseUp","onMouseOver","onMouseLeave","customStyle","style","tabIndex","props","styles","baseStyle","push","Object","keys","key","css","marginLeft","marginRight","marginTop","marginBottom","margin","paddingLeft","paddingRight","paddingTop","paddingBottom","padding","width","height","border","borderColor","ref","display","flexDirection","row","fill","flex","alignSelfCenter","alignSelf","alignItemsCenter","alignItems","center","justifyContent","alignItemsStart","alignItemsEnd","justifyContentCenter","justifyContentBetween","React","forwardRef","colors","animateAlgorithm","a","algoSpeeds","nodeRefs","selectedAlgoSpeed","shortestPath","visitedNodesInOrder","delay","i","length","setTimeout","animateShortestPath","shortestPathDelay","current","col","classList","add","Promise","resolve","isEnd","toast","error","j","preSetupAlgorithm","board","DEFAULT_END_COL","DEFAULT_END_ROW","DEFAULT_START_COL","DEFAULT_START_ROW","startNode","endNode","node","isStart","prevNode","isVisited","distance","Infinity","fDistance","gDistance","hDistance","isWall","background","remove","getUnvisitedNeighbours","neighbours","filter","neighbour","dijkstra","unvisitedNodesMinHeap","Heap","b","currNode","pop","unvisitedNeighbours","currentNode","unshift","dfs","stack","bfs","queue","shift","calculateManhattanDistance","currRow","currCol","endRow","endCol","Math","abs","aStar","selectAlgorithm","selectedAlgorithm","LogoView","src","iconPath","alt","objectFit","w","minWidth","Typography","variant","title","color","IconButton","size","aria-label","window","open","fontSize","icon","fontWeight","memo","createBoard","BOARD_COLS","BOARD_ROWS","nodes","_row","ClearButtons","isVisualizing","setBoard","setEndPosition","setHasVisualized","setPathDistance","setStartPosition","setUnvisitedCount","setVisitedDistance","wallCountRef","Button","count","innerHTML","disabled","algoSpeedsArray","algorithms","marks","value","label","VisualizationOptions","setSelectedAlgorithm","setSelectedAlgoSpeed","classes","useStyles","FormControl","formControl","InputLabel","Select","onChange","e","target","map","algorithm","index","MenuItem","SpeedSlider","defaultValue","valueLabelFormat","findIndex","mark","step","max","makeStyles","theme","createStyles","spacing","withStyles","markLabelActive","rail","track","thumb","backgroundColor","markActive","Slider","slow","normal","fast","TopBar","hasVisualized","setIsVisualizing","useState","startVisualizer","finally","pv","ph","maxWidth","borderRadius","buttonText","autoClose","closeButton","position","tooltip","tooltipSmall","InfoNodeView","caption","displayElement","isSmallTooltipWidth","Tooltip","placement","arrow","h","mv","text","align","InfoBar","endPosition","pathDistance","startPosition","unvisitedCount","visitedDistance","borderWidth","r","GridNode","Grid","item","xs","prevStartNodeRef","prevEndNodeRef","initalNodeWallState","NodeView","isMovingEndNode","isMovingStartNode","redoAlgorithm","setIsMovingEndNode","setIsMovingStartNode","handleOnMouseDown","useCallback","handleOnMouseUp","handleOnMouseEnter","wallCheck","handleOnClick","handleOnMouseOver","handleOnMouseLeave","animateInstantAlgorithm","boxShadow","Board","useEffect","container","rowIndex","columnIndex","String","PathFinderVisualizer","useRef","minHeight","overflowX","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.68a1a0b2.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { Typography, MenuItem, Select } from \"@material-ui/core\"\r\nimport { FormControl, InputLabel, Slider } from \"@material-ui/core\"\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\"\r\nimport { withStyles } from \"@material-ui/core/styles\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport { AlgoSpeed, algoSpeedsArray } from \"../../types/algorithms\"\r\nimport { algorithms, Algorithms } from \"../../types/algorithms\"\r\n\r\nconst marks: { value: number; label: AlgoSpeed }[] = []\r\nfor (let i = 0; i < algoSpeedsArray.length; i++) {\r\n  marks.push({ value: i, label: algoSpeedsArray[i] })\r\n}\r\n\r\ninterface Props {\r\n  isVisualizing: boolean\r\n  selectedAlgorithm: Algorithms\r\n  setSelectedAlgorithm: React.Dispatch<React.SetStateAction<Algorithms>>\r\n  setSelectedAlgoSpeed: React.Dispatch<React.SetStateAction<AlgoSpeed>>\r\n}\r\n\r\nconst VisualizationOptions: React.FC<Props> = ({\r\n  isVisualizing,\r\n  selectedAlgorithm,\r\n  setSelectedAlgorithm,\r\n  setSelectedAlgoSpeed,\r\n}) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <>\r\n      <Div w={200}>\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel>Select Algorithm</InputLabel>\r\n          <Select\r\n            disabled={isVisualizing}\r\n            value={selectedAlgorithm}\r\n            onChange={(e) =>\r\n              setSelectedAlgorithm((e.target.value as unknown) as Algorithms)\r\n            }\r\n            label=\"Select Algorithm\"\r\n          >\r\n            {algorithms.map((algorithm, index) => {\r\n              return (\r\n                <MenuItem key={index} value={algorithm}>\r\n                  {algorithm}\r\n                </MenuItem>\r\n              )\r\n            })}\r\n          </Select>\r\n        </FormControl>\r\n      </Div>\r\n      <Div w={32} />\r\n      <Div w={200}>\r\n        <Typography style={{ color: colors.main }}>\r\n          Visualization Speed:\r\n        </Typography>\r\n        <SpeedSlider\r\n          disabled={isVisualizing}\r\n          defaultValue={1}\r\n          valueLabelFormat={(e, value) =>\r\n            marks.findIndex((mark) => mark.value === value) + 1\r\n          }\r\n          step={null}\r\n          marks={marks}\r\n          onChange={(e, value) =>\r\n            setSelectedAlgoSpeed(algoSpeedsArray[value as number])\r\n          }\r\n          max={2}\r\n        />\r\n      </Div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 120,\r\n      borderColor: \"white\",\r\n    },\r\n  })\r\n)\r\n\r\nconst SpeedSlider = withStyles({\r\n  markLabelActive: {\r\n    color: colors.main,\r\n  },\r\n  rail: {\r\n    color: colors.lightAccent,\r\n  },\r\n  track: {\r\n    color: colors.darkAccent,\r\n  },\r\n  thumb: {\r\n    backgroundColor: colors.main,\r\n  },\r\n  mark: {\r\n    backgroundColor: colors.lightAccent,\r\n    height: 8,\r\n    marginTop: -3,\r\n  },\r\n  markActive: {\r\n    backgroundColor: colors.main,\r\n    height: 8,\r\n    marginTop: -3,\r\n  },\r\n})(Slider)\r\n\r\nexport default React.memo(VisualizationOptions)\r\n","import React, { RefObject } from \"react\"\r\nimport { css } from \"emotion\"\r\n\r\ninterface Props {\r\n  children?: React.ReactNode\r\n  className?: any\r\n  onClick?(event: React.MouseEvent<HTMLDivElement>): void\r\n  onMouseEnter?(event: React.MouseEvent<HTMLDivElement>): void\r\n  onMouseDown?(event: React.MouseEvent<HTMLDivElement>): void\r\n  onMouseUp?(event: React.MouseEvent<HTMLDivElement>): void\r\n  onMouseOver?(event: React.MouseEvent<HTMLDivElement>): void\r\n  onMouseLeave?(event: React.MouseEvent<HTMLDivElement>): void\r\n  style?: React.CSSProperties\r\n  tabIndex?: number\r\n  forwardedRef?: any\r\n  [key: string]: any\r\n}\r\n\r\nconst Div: React.FC<Props> = ({\r\n  children,\r\n  className: customClassName,\r\n  forwardedRef,\r\n  onClick,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  onMouseUp,\r\n  onMouseOver,\r\n  onMouseLeave,\r\n  style: customStyle,\r\n  tabIndex,\r\n  ...props\r\n}) => {\r\n  // 1. apply base style\r\n  const style = [styles.baseStyle]\r\n\r\n  // 2. apply custom style\r\n  style.push(customStyle)\r\n  style.push(customClassName)\r\n\r\n  // 3. apply prop style\r\n  for (const key of Object.keys(props)) {\r\n    if (props[key] === true && styles[key]) {\r\n      style.push(styles[key])\r\n    }\r\n\r\n    switch (key) {\r\n      case \"mh\":\r\n        style.push(css({ marginLeft: props[key], marginRight: props[key] }))\r\n        break\r\n      case \"mv\":\r\n        style.push(css({ marginTop: props[key], marginBottom: props[key] }))\r\n        break\r\n      case \"mt\":\r\n        style.push(css({ marginTop: props[key] }))\r\n        break\r\n      case \"mb\":\r\n        style.push(css({ marginBottom: props[key] }))\r\n        break\r\n      case \"ml\":\r\n        style.push(css({ marginLeft: props[key] }))\r\n        break\r\n      case \"mr\":\r\n        style.push(css({ marginRight: props[key] }))\r\n        break\r\n      case \"m\":\r\n        style.push(css({ margin: props[key] }))\r\n        break\r\n      case \"ph\":\r\n        style.push(css({ paddingLeft: props[key], paddingRight: props[key] }))\r\n        break\r\n      case \"pv\":\r\n        style.push(css({ paddingTop: props[key], paddingBottom: props[key] }))\r\n        break\r\n      case \"pt\":\r\n        style.push(css({ paddingTop: props[key] }))\r\n        break\r\n      case \"pb\":\r\n        style.push(css({ paddingBottom: props[key] }))\r\n        break\r\n      case \"pl\":\r\n        style.push(css({ paddingLeft: props[key] }))\r\n        break\r\n      case \"pr\":\r\n        style.push(css({ paddingRight: props[key] }))\r\n        break\r\n      case \"p\":\r\n        style.push(css({ padding: props[key] }))\r\n        break\r\n      case \"w\":\r\n        style.push(css({ width: props[key] }))\r\n        break\r\n      case \"h\":\r\n        style.push(css({ height: props[key] }))\r\n        break\r\n      case \"size\":\r\n        style.push(css({ width: props[key], height: props[key] }))\r\n        break\r\n      case \"borderColor\":\r\n        style.push(css({ border: \"solid\", borderColor: props[key] }))\r\n        break\r\n      case \"backgroundColor\":\r\n      case \"borderRadius\":\r\n      case \"borderWidth\":\r\n      case \"maxWidth\":\r\n      case \"minWidth\":\r\n      case \"minHeight\":\r\n      case \"zIndex\":\r\n      case \"overflow\":\r\n      case \"overflowX\":\r\n      case \"overflowY\":\r\n        style.push(css({ [key]: props[key] }))\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={(forwardedRef as unknown) as React.RefObject<HTMLDivElement>}\r\n      className={css(style)}\r\n      onClick={onClick}\r\n      onMouseOver={onMouseOver}\r\n      onMouseDown={onMouseDown}\r\n      onMouseEnter={onMouseEnter}\r\n      onMouseUp={onMouseUp}\r\n      onMouseLeave={onMouseLeave}\r\n      tabIndex={tabIndex}\r\n    >\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface Styles {\r\n  baseStyle: any\r\n  row: any\r\n  fill: any\r\n  alignSelfCenter: any\r\n  alignItemsCenter: any\r\n  center: any\r\n  alignItemsStart: any\r\n  alignItemsEnd: any\r\n  justifyContentCenter: any\r\n  justifyContentBetween: any\r\n  [key: string]: any\r\n}\r\n\r\nconst styles: Styles = {\r\n  baseStyle: css({\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  }),\r\n  row: css({\r\n    flexDirection: \"row\",\r\n  }),\r\n  fill: css({\r\n    flex: 1,\r\n  }),\r\n  alignSelfCenter: css({\r\n    alignSelf: \"center\",\r\n  }),\r\n  alignItemsCenter: css({\r\n    alignItems: \"center\",\r\n  }),\r\n  center: css({\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  }),\r\n  alignItemsStart: css({\r\n    alignItems: \"flex-start\",\r\n  }),\r\n  alignItemsEnd: css({\r\n    alignItems: \"flex-end\",\r\n  }),\r\n  justifyContentCenter: css({\r\n    justifyContent: \"center\",\r\n  }),\r\n  justifyContentBetween: css({\r\n    justifyContent: \"space-between\",\r\n  }),\r\n}\r\n\r\nexport default React.forwardRef<RefObject<HTMLDivElement>, Props>(\r\n  (props, ref) => <Div forwardedRef={ref} {...props} />\r\n)\r\n","export const colors = {\r\n  darkAccent: \"#8663EA\",\r\n  darkShade: \"#252236\",\r\n  lightAccent: \"#97A9EC\",\r\n  lightShade: \"#F5F5F1\",\r\n  main: \"#576DCC\",\r\n  disabled: \"#9e9e9e\",\r\n}\r\n","import { toast } from \"react-toastify\"\r\nimport { Node } from \"../../types/node\"\r\n\r\nimport { AlgoSpeed, AlgoSpeeds } from \"../../types/algorithms\"\r\nimport \"./animations.css\"\r\n\r\ninterface Props {\r\n  algoSpeeds: AlgoSpeeds\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  selectedAlgoSpeed: AlgoSpeed\r\n  shortestPath: Node[]\r\n  visitedNodesInOrder: Node[]\r\n}\r\n\r\nexport const animateAlgorithm = async ({\r\n  algoSpeeds,\r\n  nodeRefs,\r\n  selectedAlgoSpeed,\r\n  shortestPath,\r\n  visitedNodesInOrder,\r\n}: Props) => {\r\n  const delay = algoSpeeds[selectedAlgoSpeed]\r\n  const shortestPathDelay = 24\r\n\r\n  for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      setTimeout(() => {\r\n        animateShortestPath({ shortestPath, shortestPathDelay, nodeRefs })\r\n      }, delay * i)\r\n    } else {\r\n      setTimeout(() => {\r\n        nodeRefs.current[\r\n          `${visitedNodesInOrder[i].row}-${visitedNodesInOrder[i].col}`\r\n        ].classList.add(\"node-visited\")\r\n      }, delay * i)\r\n    }\r\n  }\r\n\r\n  return new Promise((resolve) => {\r\n    setTimeout(\r\n      resolve,\r\n      delay * visitedNodesInOrder.length +\r\n        shortestPath.length * shortestPathDelay +\r\n        1525\r\n    )\r\n  })\r\n}\r\n\r\ninterface Params {\r\n  shortestPath: Node[]\r\n  shortestPathDelay: number\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n}\r\n\r\nconst animateShortestPath = ({\r\n  shortestPath,\r\n  shortestPathDelay,\r\n  nodeRefs,\r\n}: Params) => {\r\n  if (!shortestPath[shortestPath.length - 1].isEnd) {\r\n    const { row, col } = shortestPath[shortestPath.length - 1]\r\n    nodeRefs.current[`${row}-${col}`].classList.add(\"node-visited\")\r\n    toast.error(\"No such path found :(\")\r\n    return\r\n  }\r\n  for (let j = 1; j < shortestPath.length; j++) {\r\n    setTimeout(() => {\r\n      nodeRefs.current[\r\n        `${shortestPath[j].row}-${shortestPath[j].col}`\r\n      ].classList.add(\"node-shortest-path\")\r\n    }, shortestPathDelay * j)\r\n  }\r\n}\r\n","import { colors } from \"../../theme\"\r\nimport { Node } from \"../../types/node\"\r\n\r\ninterface Props {\r\n  board: Node[][]\r\n  DEFAULT_END_COL: number\r\n  DEFAULT_END_ROW: number\r\n  DEFAULT_START_COL: number\r\n  DEFAULT_START_ROW: number\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n}\r\n\r\nexport const preSetupAlgorithm = ({\r\n  board,\r\n  DEFAULT_END_COL,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COL,\r\n  DEFAULT_START_ROW,\r\n  nodeRefs,\r\n}: Props) => {\r\n  let startNode: Node | null = board?.[DEFAULT_START_ROW]?.[DEFAULT_START_COL]\r\n  let endNode: Node | null = board?.[DEFAULT_END_ROW]?.[DEFAULT_END_COL]\r\n  for (const row of board) {\r\n    for (const node of row) {\r\n      if (node.isStart) {\r\n        startNode = node\r\n      } else if (node.isEnd) {\r\n        endNode = node\r\n      }\r\n    }\r\n  }\r\n  for (const row of board) {\r\n    for (const node of row) {\r\n      node.prevNode = null\r\n      node.isVisited = false\r\n      node.distance = Infinity\r\n      node.fDistance = Infinity\r\n      node.gDistance = Infinity\r\n      node.hDistance = Infinity\r\n      if (!node.isWall) {\r\n        nodeRefs.current[`${node.row}-${node.col}`].style.background =\r\n          colors.lightShade\r\n      }\r\n      nodeRefs.current[`${node.row}-${node.col}`].classList.remove(\r\n        \"node-shortest-path\",\r\n        \"node-visited\"\r\n      )\r\n    }\r\n  }\r\n  return { startNode, endNode }\r\n}\r\n","import Heap from \"heap-js\"\r\nimport { Node } from \"../types/node\"\r\n\r\ninterface Props {\r\n  board: Node[][]\r\n  endNode: Node\r\n  startNode: Node\r\n}\r\n\r\nconst dijkstra = ({ startNode, endNode, board }: Props) => {\r\n  const unvisitedNodesMinHeap = new Heap(\r\n    (a: Node, b: Node) => a.distance - b.distance\r\n  )\r\n  startNode.distance = 0\r\n  for (const row of board) {\r\n    for (const node of row) {\r\n      unvisitedNodesMinHeap.push(node)\r\n    }\r\n  }\r\n\r\n  const visitedNodesInOrder: Node[] = []\r\n  const shortestPath: Node[] = []\r\n\r\n  while (unvisitedNodesMinHeap.length > 0) {\r\n    const currNode: Node = unvisitedNodesMinHeap.pop() as Node\r\n\r\n    if (currNode.isWall) continue\r\n    if (currNode.distance === Infinity) break\r\n\r\n    currNode.isVisited = true\r\n    visitedNodesInOrder.push(currNode)\r\n\r\n    if (currNode === endNode) break\r\n\r\n    const unvisitedNeighbours = getUnvisitedNeighbours({\r\n      node: currNode,\r\n      board,\r\n    })\r\n\r\n    for (const neighbour of unvisitedNeighbours) {\r\n      neighbour.distance = currNode.distance + 1\r\n      neighbour.prevNode = currNode\r\n      unvisitedNodesMinHeap.remove(neighbour)\r\n      unvisitedNodesMinHeap.push(neighbour)\r\n    }\r\n  }\r\n\r\n  let currentNode: Node | null =\r\n    visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n  while (currentNode) {\r\n    shortestPath.unshift(currentNode)\r\n    currentNode = currentNode.prevNode\r\n  }\r\n\r\n  return { visitedNodesInOrder, shortestPath }\r\n}\r\n\r\nexport const getUnvisitedNeighbours = ({\r\n  node,\r\n  board,\r\n}: {\r\n  node: Node\r\n  board: Node[][]\r\n}) => {\r\n  const neighbours: Node[] = []\r\n  const { row, col } = node\r\n  if (row > 0) neighbours.push(board[row - 1][col])\r\n  if (row < board.length - 1) neighbours.push(board[row + 1][col])\r\n  if (col > 0) neighbours.push(board[row][col - 1])\r\n  if (col < board[0].length - 1) neighbours.push(board[row][col + 1])\r\n  return neighbours.filter((neighbour) => !neighbour.isVisited)\r\n}\r\n\r\nexport default dijkstra\r\n","import { Node } from \"../types/node\"\r\nimport { getUnvisitedNeighbours } from \"./dijkstra\"\r\n\r\ninterface Props {\r\n  board: Node[][]\r\n  endNode: Node\r\n  startNode: Node\r\n}\r\nconst dfs = ({ board, endNode, startNode }: Props) => {\r\n  const stack: Node[] = []\r\n  startNode.distance = 0\r\n  stack.push(startNode)\r\n\r\n  const visitedNodesInOrder: Node[] = []\r\n  const shortestPath: Node[] = []\r\n\r\n  while (stack.length > 0) {\r\n    const currNode: Node = stack.pop() as Node\r\n\r\n    if (currNode.isWall) continue\r\n    if (currNode.distance === Infinity) break\r\n\r\n    currNode.isVisited = true\r\n    visitedNodesInOrder.push(currNode)\r\n\r\n    if (currNode === endNode) break\r\n\r\n    const unvisitedNeighbours = getUnvisitedNeighbours({\r\n      node: currNode,\r\n      board,\r\n    })\r\n    for (const neighbour of unvisitedNeighbours) {\r\n      neighbour.distance = currNode.distance + 1\r\n      neighbour.prevNode = currNode\r\n      stack.push(neighbour)\r\n    }\r\n  }\r\n\r\n  let currentNode: Node | null =\r\n    visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n  while (currentNode) {\r\n    shortestPath.unshift(currentNode)\r\n    currentNode = currentNode.prevNode\r\n  }\r\n\r\n  return { visitedNodesInOrder, shortestPath }\r\n}\r\n\r\nexport default dfs\r\n","import { Node } from \"../types/node\"\r\nimport { getUnvisitedNeighbours } from \"./dijkstra\"\r\n\r\ninterface Props {\r\n  board: Node[][]\r\n  endNode: Node\r\n  startNode: Node\r\n}\r\n\r\nconst bfs = ({ board, endNode, startNode }: Props) => {\r\n  const queue: Node[] = []\r\n  startNode.distance = 0\r\n  queue.push(startNode)\r\n\r\n  const visitedNodesInOrder: Node[] = []\r\n  const shortestPath: Node[] = []\r\n\r\n  while (queue.length > 0) {\r\n    const currNode: Node = queue.shift() as Node\r\n\r\n    if (currNode.isWall) continue\r\n    if (currNode.distance === Infinity) break\r\n\r\n    currNode.isVisited = true\r\n    visitedNodesInOrder.push(currNode)\r\n\r\n    if (currNode === endNode) break\r\n\r\n    const unvisitedNeighbours = getUnvisitedNeighbours({\r\n      node: currNode,\r\n      board,\r\n    })\r\n    for (const neighbour of unvisitedNeighbours) {\r\n      neighbour.isVisited = true\r\n      neighbour.distance = currNode.distance + 1\r\n      neighbour.prevNode = currNode\r\n      queue.push(neighbour)\r\n    }\r\n  }\r\n\r\n  let currentNode: Node | null =\r\n    visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n  while (currentNode) {\r\n    shortestPath.unshift(currentNode)\r\n    currentNode = currentNode.prevNode\r\n  }\r\n  return { visitedNodesInOrder, shortestPath }\r\n}\r\n\r\nexport default bfs\r\n","import { Node } from \"../types/node\"\r\nimport Heap from \"heap-js\"\r\nimport { getUnvisitedNeighbours } from \"./dijkstra\"\r\n\r\ninterface Props {\r\n  board: Node[][]\r\n  endNode: Node\r\n  startNode: Node\r\n}\r\n\r\nconst aStar = ({ board, endNode, startNode }: Props) => {\r\n  const unvisitedNodesMinHeap = new Heap(\r\n    (a: Node, b: Node) => a.fDistance - b.fDistance\r\n  )\r\n\r\n  startNode.fDistance = 0\r\n  startNode.gDistance = 0\r\n  startNode.hDistance = 0\r\n\r\n  for (const row of board) {\r\n    for (const node of row) {\r\n      unvisitedNodesMinHeap.push(node)\r\n    }\r\n  }\r\n\r\n  const visitedNodesInOrder: Node[] = []\r\n  const shortestPath: Node[] = []\r\n\r\n  while (unvisitedNodesMinHeap.length > 0) {\r\n    const currNode: Node = unvisitedNodesMinHeap.pop() as Node\r\n\r\n    if (currNode.isWall) continue\r\n    if (currNode.fDistance === Infinity) break\r\n\r\n    currNode.isVisited = true\r\n    visitedNodesInOrder.push(currNode)\r\n\r\n    if (currNode === endNode) break\r\n\r\n    const unvisitedNeighbours = getUnvisitedNeighbours({\r\n      node: currNode,\r\n      board,\r\n    })\r\n    for (const neighbour of unvisitedNeighbours) {\r\n      neighbour.gDistance = currNode.gDistance + 1\r\n      neighbour.hDistance = calculateManhattanDistance({\r\n        currRow: neighbour.row,\r\n        currCol: neighbour.col,\r\n        endRow: endNode.row,\r\n        endCol: endNode.col,\r\n      })\r\n      neighbour.fDistance = neighbour.hDistance + neighbour.gDistance\r\n      neighbour.prevNode = currNode\r\n      unvisitedNodesMinHeap.remove(neighbour)\r\n      unvisitedNodesMinHeap.push(neighbour)\r\n    }\r\n  }\r\n\r\n  let currentNode: Node | null =\r\n    visitedNodesInOrder[visitedNodesInOrder.length - 1]\r\n  while (currentNode) {\r\n    shortestPath.unshift(currentNode)\r\n    currentNode = currentNode.prevNode\r\n  }\r\n  return { visitedNodesInOrder, shortestPath }\r\n}\r\n\r\nconst calculateManhattanDistance = ({\r\n  currRow,\r\n  currCol,\r\n  endRow,\r\n  endCol,\r\n}: {\r\n  currRow: number\r\n  currCol: number\r\n  endRow: number\r\n  endCol: number\r\n}) => {\r\n  return Math.abs(currRow - endRow) + Math.abs(currCol - endCol)\r\n}\r\n\r\nexport default aStar\r\n","import { Algorithms } from \"../../types/algorithms\"\r\nimport { Node } from \"../../types/node\"\r\nimport { dijkstra, dfs, bfs, aStar } from \"../../algorithms\"\r\n\r\ninterface Props {\r\n  selectedAlgorithm: Algorithms\r\n  board: Node[][]\r\n  endNode: Node\r\n  startNode: Node\r\n}\r\n\r\nexport const selectAlgorithm = ({\r\n  selectedAlgorithm,\r\n  board,\r\n  endNode,\r\n  startNode,\r\n}: Props) => {\r\n  const visitedNodesInOrder: Node[] = []\r\n  const shortestPath: Node[] = []\r\n\r\n  switch (selectedAlgorithm) {\r\n    case \"Dijkstra\":\r\n      return dijkstra({ board, endNode, startNode })\r\n    case \"Depth-first Search\":\r\n      return dfs({ board, endNode, startNode })\r\n    case \"Breadth-first Search\":\r\n      return bfs({ board, endNode, startNode })\r\n    case \"A*\":\r\n      return aStar({ board, endNode, startNode })\r\n    default:\r\n      return { visitedNodesInOrder, shortestPath }\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/iconPath.23c728f7.svg\";","import React from \"react\"\r\nimport { Typography, IconButton } from \"@material-ui/core\"\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\"\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport { iconPath } from \"../../images\"\r\n\r\nconst LogoView: React.FC = () => {\r\n  return (\r\n    <>\r\n      <img\r\n        src={iconPath}\r\n        alt=\"path\"\r\n        style={{ objectFit: \"contain\", width: 56, height: 56 }}\r\n      />\r\n      <Div w={16} />\r\n      <Div minWidth={176}>\r\n        <Typography variant=\"h5\" style={styles.title}>\r\n          Path Visualizer\r\n        </Typography>\r\n        <Div alignItemsCenter row>\r\n          <Typography variant=\"caption\" style={{ color: colors.darkShade }}>\r\n            by Anson Chen\r\n          </Typography>\r\n          <Div w={2} />\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-label=\"github.com\"\r\n            onClick={() =>\r\n              window.open(\r\n                \"https://www.linkedin.com/in/anson-chen-8a01751ab/\",\r\n                \"_blank\"\r\n              )\r\n            }\r\n          >\r\n            <LinkedInIcon fontSize=\"small\" style={styles.icon} />\r\n          </IconButton>\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-label=\"Linkedin.com\"\r\n            onClick={() =>\r\n              window.open(\"https://github.com/ansonccchen\", \"_blank\")\r\n            }\r\n          >\r\n            <GitHubIcon fontSize=\"small\" style={styles.icon} />\r\n          </IconButton>\r\n        </Div>\r\n      </Div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  icon: { color: colors.lightAccent },\r\n  title: { color: colors.main, fontWeight: 600 },\r\n}\r\n\r\nexport default React.memo(LogoView)\r\n","import { colors } from \"../../theme\"\r\nimport { Node } from \"../../types/node\"\r\n\r\ninterface Props {\r\n  BOARD_COLS: number\r\n  BOARD_ROWS: number\r\n  DEFAULT_END_COL: number\r\n  DEFAULT_END_ROW: number\r\n  DEFAULT_START_COL: number\r\n  DEFAULT_START_ROW: number\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n}\r\n\r\nexport const createBoard = ({\r\n  BOARD_COLS,\r\n  BOARD_ROWS,\r\n  DEFAULT_END_COL,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COL,\r\n  DEFAULT_START_ROW,\r\n  nodeRefs,\r\n}: Props) => {\r\n  const nodes = []\r\n  for (let row = 0; row < BOARD_ROWS; row++) {\r\n    const _row = []\r\n    for (let col = 0; col < BOARD_COLS; col++) {\r\n      const node: Node = {\r\n        col,\r\n        distance: Infinity,\r\n        fDistance: Infinity,\r\n        gDistance: Infinity,\r\n        hDistance: Infinity,\r\n        isEnd: row === DEFAULT_END_ROW && col === DEFAULT_END_COL,\r\n        isStart: row === DEFAULT_START_ROW && col === DEFAULT_START_COL,\r\n        isVisited: false,\r\n        isWall: false,\r\n        prevNode: null,\r\n        row,\r\n      }\r\n      if (nodeRefs.current[`${row}-${col}`]) {\r\n        nodeRefs.current[`${row}-${col}`].style.background = colors.lightShade\r\n        nodeRefs.current[`${node.row}-${node.col}`].classList.remove(\r\n          \"node-shortest-path\",\r\n          \"node-visited\"\r\n        )\r\n      }\r\n      _row.push(node)\r\n    }\r\n    nodes.push(_row)\r\n  }\r\n  return nodes\r\n}\r\n","import React from \"react\"\r\nimport { Typography, Button } from \"@material-ui/core\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport { Node } from \"../../types/node\"\r\nimport { createBoard } from \"../../helpers/board/createBoard\"\r\n\r\ninterface Props {\r\n  BOARD_COLS: number\r\n  BOARD_ROWS: number\r\n  board: Node[][]\r\n  DEFAULT_END_COL: number\r\n  DEFAULT_END_ROW: number\r\n  DEFAULT_START_COL: number\r\n  DEFAULT_START_ROW: number\r\n  isVisualizing: boolean\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  setBoard: React.Dispatch<any>\r\n  setEndPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setHasVisualized: React.Dispatch<React.SetStateAction<boolean>>\r\n  setPathDistance: React.Dispatch<React.SetStateAction<number | \"\" | \"N/A\">>\r\n  setStartPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setUnvisitedCount: React.Dispatch<React.SetStateAction<number>>\r\n  setVisitedDistance: React.Dispatch<React.SetStateAction<number | \"\" | \"N/A\">>\r\n  wallCountRef: React.MutableRefObject<{ [name: string]: any } | null>\r\n}\r\n\r\nconst ClearButtons: React.FC<Props> = ({\r\n  BOARD_COLS,\r\n  BOARD_ROWS,\r\n  board,\r\n  DEFAULT_END_COL,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COL,\r\n  DEFAULT_START_ROW,\r\n  isVisualizing,\r\n  nodeRefs,\r\n  setBoard,\r\n  setEndPosition,\r\n  setHasVisualized,\r\n  setPathDistance,\r\n  setStartPosition,\r\n  setUnvisitedCount,\r\n  setVisitedDistance,\r\n  wallCountRef,\r\n}) => {\r\n  const resetBoard = () => {\r\n    const nodes = createBoard({\r\n      BOARD_COLS,\r\n      BOARD_ROWS,\r\n      DEFAULT_END_COL,\r\n      DEFAULT_END_ROW,\r\n      DEFAULT_START_COL,\r\n      DEFAULT_START_ROW,\r\n      nodeRefs,\r\n    })\r\n    setStartPosition([DEFAULT_START_ROW, DEFAULT_START_COL])\r\n    setEndPosition([DEFAULT_END_ROW, DEFAULT_END_COL])\r\n    if (wallCountRef.current) {\r\n      wallCountRef.current.count = 0\r\n      wallCountRef.current.innerHTML = \"Count: 0\"\r\n    }\r\n    setUnvisitedCount(BOARD_COLS * BOARD_ROWS)\r\n    setVisitedDistance(\"\")\r\n    setPathDistance(\"\")\r\n    setHasVisualized(false)\r\n    setBoard(nodes)\r\n  }\r\n\r\n  const clearWalls = () => {\r\n    for (const row of board) {\r\n      for (const node of row) {\r\n        if (node.isWall) {\r\n          node.isWall = false\r\n          nodeRefs.current[`${node.row}-${node.col}`].style.background =\r\n            colors.lightShade\r\n        }\r\n      }\r\n    }\r\n    if (wallCountRef.current) {\r\n      wallCountRef.current.count = 0\r\n      wallCountRef.current.innerHTML = \"Count: 0\"\r\n    }\r\n  }\r\n\r\n  const clearPath = () => {\r\n    for (const row of board) {\r\n      for (const node of row) {\r\n        if (node.isVisited) {\r\n          node.isVisited = false\r\n          nodeRefs.current[`${node.row}-${node.col}`].classList.remove(\r\n            \"node-shortest-path\",\r\n            \"node-visited\"\r\n          )\r\n          nodeRefs.current[`${node.row}-${node.col}`].style.background =\r\n            colors.lightShade\r\n        }\r\n      }\r\n    }\r\n    setUnvisitedCount(BOARD_COLS * BOARD_ROWS)\r\n    setVisitedDistance(\"\")\r\n    setPathDistance(\"\")\r\n    setHasVisualized(false)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={resetBoard} disabled={isVisualizing}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            color: isVisualizing ? colors.disabled : colors.main,\r\n            fontWeight: 500,\r\n          }}\r\n        >\r\n          Reset Board\r\n        </Typography>\r\n      </Button>\r\n      <Div w={8} />\r\n      <Button onClick={clearWalls} disabled={isVisualizing}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            color: isVisualizing ? colors.disabled : colors.main,\r\n            fontWeight: 500,\r\n          }}\r\n        >\r\n          Clear Walls\r\n        </Typography>\r\n      </Button>\r\n      <Div w={8} />\r\n      <Button onClick={clearPath} disabled={isVisualizing}>\r\n        <Typography\r\n          variant=\"h6\"\r\n          style={{\r\n            color: isVisualizing ? colors.disabled : colors.main,\r\n            fontWeight: 500,\r\n          }}\r\n        >\r\n          Clear Path\r\n        </Typography>\r\n      </Button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(ClearButtons)\r\n","export const algoSpeedsArray = [\"slow\", \"normal\", \"fast\"] as const\r\nexport type AlgoSpeed = typeof algoSpeedsArray[number]\r\nexport interface AlgoSpeeds {\r\n  slow: number\r\n  normal: number\r\n  fast: number\r\n}\r\n\r\nexport const algorithms = [\r\n  \"Dijkstra\",\r\n  \"Depth-first Search\",\r\n  \"Breadth-first Search\",\r\n  \"A*\",\r\n] as const\r\nexport type Algorithms = typeof algorithms[number] | \"\"\r\n\r\nexport const mazeAlgorithms = [\r\n  \"Recursive Division\",\r\n  \"Horizontal Skewed\",\r\n  \"Vertical Skewed\",\r\n  \"Basic Random\",\r\n] as const\r\nexport type MazeAlgorithms = typeof mazeAlgorithms[number] | \"\"\r\n","import React, { useState } from \"react\"\r\nimport { Typography, Button } from \"@material-ui/core\"\r\nimport { ToastContainer } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport { animateAlgorithm } from \"../../helpers/animations/animateAlgorithm\"\r\nimport { Node } from \"../../types/node\"\r\nimport { AlgoSpeed, AlgoSpeeds, Algorithms } from \"../../types/algorithms\"\r\nimport { preSetupAlgorithm } from \"../../helpers/algorithms/preSetupAlgorithm\"\r\nimport { selectAlgorithm } from \"../../helpers/algorithms/selectAlgorithm\"\r\nimport LogoView from \"./LogoView\"\r\nimport ClearButtons from \"./ClearButtons\"\r\nimport VisualizationOptions from \"./VisualizationOptions\"\r\n\r\nconst algoSpeeds: AlgoSpeeds = {\r\n  slow: 24,\r\n  normal: 10,\r\n  fast: 2,\r\n}\r\n\r\ninterface Props {\r\n  BOARD_COLS: number\r\n  BOARD_ROWS: number\r\n  board: Node[][]\r\n  DEFAULT_END_COL: number\r\n  DEFAULT_END_ROW: number\r\n  DEFAULT_START_COL: number\r\n  DEFAULT_START_ROW: number\r\n  hasVisualized: boolean\r\n  isVisualizing: boolean\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  selectedAlgorithm: Algorithms\r\n  setBoard: React.Dispatch<any>\r\n  setEndPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setHasVisualized: React.Dispatch<React.SetStateAction<boolean>>\r\n  setIsVisualizing: React.Dispatch<React.SetStateAction<boolean>>\r\n  setPathDistance: React.Dispatch<React.SetStateAction<number | \"\" | \"N/A\">>\r\n  setSelectedAlgorithm: React.Dispatch<React.SetStateAction<Algorithms>>\r\n  setStartPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setUnvisitedCount: React.Dispatch<React.SetStateAction<number>>\r\n  setVisitedDistance: React.Dispatch<React.SetStateAction<number | \"\" | \"N/A\">>\r\n  wallCountRef: React.MutableRefObject<{ [name: string]: any } | null>\r\n}\r\n\r\nconst TopBar: React.FC<Props> = ({\r\n  BOARD_COLS,\r\n  BOARD_ROWS,\r\n  board,\r\n  DEFAULT_END_COL,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COL,\r\n  DEFAULT_START_ROW,\r\n  hasVisualized,\r\n  isVisualizing,\r\n  nodeRefs,\r\n  selectedAlgorithm,\r\n  setBoard,\r\n  setEndPosition,\r\n  setHasVisualized,\r\n  setIsVisualizing,\r\n  setPathDistance,\r\n  setSelectedAlgorithm,\r\n  setStartPosition,\r\n  setUnvisitedCount,\r\n  setVisitedDistance,\r\n  wallCountRef,\r\n}) => {\r\n  const [selectedAlgoSpeed, setSelectedAlgoSpeed] = useState<AlgoSpeed>(\r\n    \"normal\"\r\n  )\r\n\r\n  const startVisualizer = async () => {\r\n    const { startNode, endNode } = preSetupAlgorithm({\r\n      board,\r\n      DEFAULT_END_COL,\r\n      DEFAULT_END_ROW,\r\n      DEFAULT_START_COL,\r\n      DEFAULT_START_ROW,\r\n      nodeRefs,\r\n    })\r\n    const { visitedNodesInOrder, shortestPath } = selectAlgorithm({\r\n      selectedAlgorithm,\r\n      board,\r\n      endNode,\r\n      startNode,\r\n    })\r\n\r\n    setIsVisualizing(true)\r\n    await new Promise((resolve) => setTimeout(resolve, 200))\r\n    animateAlgorithm({\r\n      visitedNodesInOrder,\r\n      shortestPath,\r\n      algoSpeeds,\r\n      selectedAlgoSpeed,\r\n      nodeRefs,\r\n    }).finally(() => {\r\n      setIsVisualizing(false)\r\n\r\n      setUnvisitedCount(\r\n        BOARD_COLS * BOARD_ROWS - visitedNodesInOrder.length + 1\r\n      )\r\n      setVisitedDistance(visitedNodesInOrder.length - 1)\r\n      if (shortestPath[shortestPath.length - 1].isEnd)\r\n        setPathDistance(shortestPath.length - 1)\r\n      else setPathDistance(\"N/A\")\r\n\r\n      if (!hasVisualized) setHasVisualized(true)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Div\r\n      backgroundColor={colors.lightShade}\r\n      row\r\n      pv={8}\r\n      ph={24}\r\n      justifyContentCenter\r\n    >\r\n      <Div maxWidth={1704} row alignItemsCenter fill>\r\n        <LogoView />\r\n        <Div w={8} />\r\n        <VisualizationOptions\r\n          isVisualizing={isVisualizing}\r\n          selectedAlgorithm={selectedAlgorithm}\r\n          setSelectedAlgorithm={setSelectedAlgorithm}\r\n          setSelectedAlgoSpeed={setSelectedAlgoSpeed}\r\n        />\r\n        <Div w={32} />\r\n        <Button onClick={startVisualizer} disabled={isVisualizing}>\r\n          <Div\r\n            backgroundColor={\r\n              isVisualizing ? colors.disabled : colors.darkAccent\r\n            }\r\n            pv={8}\r\n            ph={16}\r\n            borderRadius={4}\r\n          >\r\n            <Typography style={styles.buttonText} variant=\"h6\">\r\n              {isVisualizing ? \"Visualizing...\" : \"Visualize\"}\r\n            </Typography>\r\n          </Div>\r\n        </Button>\r\n        <Div w={8} />\r\n        <ClearButtons\r\n          BOARD_COLS={BOARD_COLS}\r\n          BOARD_ROWS={BOARD_ROWS}\r\n          board={board}\r\n          DEFAULT_END_COL={DEFAULT_END_COL}\r\n          DEFAULT_END_ROW={DEFAULT_END_ROW}\r\n          DEFAULT_START_COL={DEFAULT_START_COL}\r\n          DEFAULT_START_ROW={DEFAULT_START_ROW}\r\n          isVisualizing={isVisualizing}\r\n          nodeRefs={nodeRefs}\r\n          setBoard={setBoard}\r\n          setEndPosition={setEndPosition}\r\n          setHasVisualized={setHasVisualized}\r\n          setPathDistance={setPathDistance}\r\n          setStartPosition={setStartPosition}\r\n          setUnvisitedCount={setUnvisitedCount}\r\n          setVisitedDistance={setVisitedDistance}\r\n          wallCountRef={wallCountRef}\r\n        />\r\n      </Div>\r\n      <ToastContainer autoClose={8000} closeButton position=\"bottom-right\" />\r\n    </Div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  buttonText: { fontWeight: 500, color: colors.lightShade },\r\n}\r\n\r\nexport default React.memo(TopBar)\r\n","import React from \"react\"\r\nimport {\r\n  Typography,\r\n  Tooltip,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n} from \"@material-ui/core\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    tooltip: {\r\n      maxWidth: 320,\r\n      fontSize: 16,\r\n    },\r\n    tooltipSmall: {\r\n      maxWidth: 232,\r\n      fontSize: 16,\r\n    },\r\n  })\r\n)\r\n\r\ninterface Props {\r\n  caption?: any\r\n  displayElement: any\r\n  isSmallTooltipWidth?: boolean\r\n  label: string\r\n  tooltip?: string\r\n}\r\n\r\nconst InfoNodeView: React.FC<Props> = ({\r\n  caption,\r\n  displayElement,\r\n  isSmallTooltipWidth,\r\n  label,\r\n  tooltip,\r\n}) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Div alignItemsCenter>\r\n      <Tooltip\r\n        title={tooltip || \"\"}\r\n        placement=\"top-start\"\r\n        arrow\r\n        classes={{\r\n          tooltip: isSmallTooltipWidth ? classes.tooltipSmall : classes.tooltip,\r\n        }}\r\n      >\r\n        <Div\r\n          alignItemsCenter\r\n          backgroundColor={colors.lightShade}\r\n          borderRadius={4}\r\n          h={64}\r\n          justifyContentCenter\r\n          mv={8}\r\n          w={64}\r\n        >\r\n          {displayElement}\r\n        </Div>\r\n      </Tooltip>\r\n      <Div w={120} alignItemsCenter>\r\n        <Typography style={styles.text} align=\"center\">\r\n          {label}\r\n        </Typography>\r\n        {caption}\r\n      </Div>\r\n    </Div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  text: {\r\n    color: colors.lightShade,\r\n    fontWeight: 600,\r\n  },\r\n}\r\n\r\nexport default React.memo(InfoNodeView)\r\n","import React from \"react\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\"\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\"\r\nimport { Typography } from \"@material-ui/core\"\r\n\r\nimport InfoNodeView from \"./InfoNodeView\"\r\n\r\ninterface Props {\r\n  endPosition: number[]\r\n  pathDistance: number | \"\" | \"N/A\"\r\n  startPosition: number[]\r\n  unvisitedCount: number\r\n  visitedDistance: number | \"\" | \"N/A\"\r\n  wallCountRef: React.MutableRefObject<{ [name: string]: any } | null>\r\n}\r\n\r\nconst InfoBar: React.FC<Props> = ({\r\n  endPosition,\r\n  pathDistance,\r\n  startPosition,\r\n  unvisitedCount,\r\n  visitedDistance,\r\n  wallCountRef,\r\n}) => {\r\n  return (\r\n    <Div\r\n      row\r\n      backgroundColor={colors.darkShade}\r\n      pv={8}\r\n      ph={24}\r\n      justifyContentCenter\r\n    >\r\n      <Div maxWidth={1704} row fill>\r\n        <InfoNodeView\r\n          label=\"Start\"\r\n          tooltip=\"To move start position, click the start icon on the board and drag anywhere as desired\"\r\n          displayElement={\r\n            <Div\r\n              alignItemsCenter\r\n              backgroundColor={colors.lightShade}\r\n              borderColor=\"#cceaf0\"\r\n              borderWidth={2}\r\n              h={40}\r\n              justifyContentCenter\r\n              w={40}\r\n            >\r\n              <KeyboardArrowRightIcon fontSize=\"large\" style={styles.icon} />\r\n            </Div>\r\n          }\r\n          caption={\r\n            <Typography style={{ color: colors.lightShade }} variant=\"body2\">\r\n              Position: ({startPosition[1]},{startPosition[0]})\r\n            </Typography>\r\n          }\r\n        />\r\n        <Div w={48} />\r\n        <InfoNodeView\r\n          label=\"End\"\r\n          tooltip=\"To move end position, click the end icon on the board and drag anywhere as desired\"\r\n          displayElement={\r\n            <Div\r\n              alignItemsCenter\r\n              backgroundColor={colors.lightShade}\r\n              borderColor=\"#cceaf0\"\r\n              borderWidth={2}\r\n              h={40}\r\n              justifyContentCenter\r\n              w={40}\r\n            >\r\n              <RadioButtonCheckedIcon fontSize=\"large\" style={styles.icon} />\r\n            </Div>\r\n          }\r\n          caption={\r\n            <Typography style={{ color: colors.lightShade }} variant=\"body2\">\r\n              Position: ({endPosition[1]},{endPosition[0]})\r\n            </Typography>\r\n          }\r\n        />\r\n        <Div w={48} />\r\n        <InfoNodeView\r\n          label=\"Wall\"\r\n          tooltip=\"Click anywhere on the board to place/remove a wall\"\r\n          isSmallTooltipWidth\r\n          displayElement={\r\n            <Div w={40} h={40} backgroundColor={colors.darkShade} />\r\n          }\r\n          caption={\r\n            <Typography\r\n              ref={(r) => {\r\n                if (\r\n                  wallCountRef.current &&\r\n                  Object.keys(wallCountRef.current).length === 0\r\n                ) {\r\n                  wallCountRef.current = r\r\n                  if (wallCountRef.current) wallCountRef.current.count = 0\r\n                }\r\n              }}\r\n              style={{ color: colors.lightShade }}\r\n              variant=\"body2\"\r\n            >\r\n              Count: {wallCountRef.current?.count ?? 0}\r\n            </Typography>\r\n          }\r\n        />\r\n        <Div w={48} />\r\n        <InfoNodeView\r\n          label=\"Unvisited\"\r\n          displayElement={\r\n            <Div\r\n              alignItemsCenter\r\n              backgroundColor={colors.lightShade}\r\n              borderColor=\"#cceaf0\"\r\n              borderWidth={2}\r\n              h={40}\r\n              justifyContentCenter\r\n              w={40}\r\n            />\r\n          }\r\n          caption={\r\n            <Typography style={{ color: colors.lightShade }} variant=\"body2\">\r\n              Count: {unvisitedCount}\r\n            </Typography>\r\n          }\r\n        />\r\n        <Div w={48} />\r\n        <InfoNodeView\r\n          label=\"Visited\"\r\n          displayElement={\r\n            <Div w={40} h={40} backgroundColor={colors.darkAccent} />\r\n          }\r\n          caption={\r\n            <Typography style={{ color: colors.lightShade }} variant=\"body2\">\r\n              Distance: {visitedDistance}\r\n            </Typography>\r\n          }\r\n        />\r\n        <Div w={48} />\r\n        <InfoNodeView\r\n          label=\"Path\"\r\n          displayElement={\r\n            <Div w={40} h={40} backgroundColor={colors.lightAccent} />\r\n          }\r\n          caption={\r\n            <Typography style={{ color: colors.lightShade }} variant=\"body2\">\r\n              Distance: {pathDistance}\r\n            </Typography>\r\n          }\r\n        />\r\n      </Div>\r\n    </Div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  icon: {\r\n    color: colors.darkShade,\r\n  },\r\n}\r\n\r\nexport default React.memo(InfoBar)\r\n","import React from \"react\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport KeyboardArrowRightIcon from \"@material-ui/icons/KeyboardArrowRight\"\r\nimport RadioButtonCheckedIcon from \"@material-ui/icons/RadioButtonChecked\"\r\n\r\ninterface Props {\r\n  col: number\r\n  isEnd: boolean\r\n  isStart: boolean\r\n  isWall: boolean\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  onClick?: () => void\r\n  onMouseLeave?: () => void\r\n  onMouseOver?: () => void\r\n  onMouseDown?: () => void\r\n  onMouseUp?: () => void\r\n  onMouseEnter?: () => void\r\n  row: number\r\n}\r\n\r\nconst GridNode: React.FC<Props> = ({\r\n  col,\r\n  isEnd,\r\n  isStart,\r\n  isWall,\r\n  nodeRefs,\r\n  onClick,\r\n  onMouseLeave,\r\n  onMouseDown,\r\n  onMouseUp,\r\n  onMouseOver,\r\n  onMouseEnter,\r\n  row,\r\n}) => {\r\n  return (\r\n    <Grid item xs>\r\n      <Div\r\n        alignItemsCenter\r\n        backgroundColor={\r\n          isWall\r\n            ? isStart || isEnd\r\n              ? colors.lightShade\r\n              : colors.darkShade\r\n            : colors.lightShade\r\n        }\r\n        borderColor=\"#cceaf0\"\r\n        borderWidth={0.5}\r\n        h={32}\r\n        justifyContentCenter\r\n        onClick={onClick}\r\n        onMouseLeave={onMouseLeave}\r\n        onMouseOver={onMouseOver}\r\n        onMouseDown={onMouseDown}\r\n        onMouseUp={onMouseUp}\r\n        onMouseEnter={onMouseEnter}\r\n        ref={(r) => (nodeRefs.current[`${row}-${col}`] = r)}\r\n      >\r\n        {isStart && (\r\n          <KeyboardArrowRightIcon style={{ color: colors.darkShade }} />\r\n        )}\r\n        {isEnd && (\r\n          <RadioButtonCheckedIcon style={{ color: colors.darkShade }} />\r\n        )}\r\n      </Div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default React.memo(GridNode)\r\n","import React, { useCallback } from \"react\"\r\nimport { colors } from \"../../theme\"\r\nimport { Node } from \"../../types/node\"\r\nimport GridNode from \"./GridNode\"\r\n\r\ninterface Props {\r\n  endPosition?: number[]\r\n  isMovingEndNode: boolean\r\n  isMovingStartNode: boolean\r\n  isVisualizing: boolean\r\n  node: Node\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  redoAlgorithm: () => void\r\n  setEndPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setIsMovingEndNode: React.Dispatch<React.SetStateAction<boolean>>\r\n  setIsMovingStartNode: React.Dispatch<React.SetStateAction<boolean>>\r\n  setStartPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  startPosition?: number[]\r\n  wallCountRef: React.MutableRefObject<{ [name: string]: any } | null>\r\n}\r\n\r\nlet prevStartNodeRef: Node | null = null\r\nlet prevEndNodeRef: Node | null = null\r\nlet initalNodeWallState: boolean = false\r\n// let previousNodeWallState: boolean = false\r\n\r\nconst NodeView: React.FC<Props> = ({\r\n  endPosition,\r\n  isMovingEndNode,\r\n  isMovingStartNode,\r\n  isVisualizing,\r\n  node,\r\n  nodeRefs,\r\n  redoAlgorithm,\r\n  setEndPosition,\r\n  setIsMovingEndNode,\r\n  setIsMovingStartNode,\r\n  setStartPosition,\r\n  startPosition,\r\n  wallCountRef,\r\n}) => {\r\n  const handleOnMouseDown = useCallback(() => {\r\n    if (isVisualizing) return\r\n    if (node.isStart) {\r\n      setIsMovingStartNode(true)\r\n    } else if (node.isEnd) {\r\n      setIsMovingEndNode(true)\r\n    }\r\n  }, [\r\n    isVisualizing,\r\n    node.isEnd,\r\n    node.isStart,\r\n    setIsMovingEndNode,\r\n    setIsMovingStartNode,\r\n  ])\r\n\r\n  const handleOnMouseUp = useCallback(() => {\r\n    if (isVisualizing) return\r\n    if (isMovingStartNode) {\r\n      if (!node.isEnd) {\r\n        node.isStart = true\r\n      } else {\r\n        if (prevStartNodeRef) {\r\n          prevStartNodeRef.isStart = true\r\n          prevStartNodeRef.isWall = false\r\n          nodeRefs.current[\r\n            `${prevStartNodeRef.row}-${prevStartNodeRef.col}`\r\n          ].style.backgroundColor = colors.lightShade\r\n        }\r\n      }\r\n      setIsMovingStartNode(false)\r\n    } else if (isMovingEndNode) {\r\n      if (!node.isStart) {\r\n        node.isEnd = true\r\n      } else {\r\n        prevEndNodeRef && (prevEndNodeRef.isEnd = true)\r\n      }\r\n      setIsMovingEndNode(false)\r\n    }\r\n  }, [\r\n    isMovingEndNode,\r\n    isMovingStartNode,\r\n    isVisualizing,\r\n    node,\r\n    nodeRefs,\r\n    setIsMovingEndNode,\r\n    setIsMovingStartNode,\r\n  ])\r\n\r\n  const handleOnMouseEnter = useCallback(() => {\r\n    if (isVisualizing) return\r\n\r\n    const wallCheck = () => {\r\n      if (node.isWall) {\r\n        initalNodeWallState = true\r\n        node.isWall = false\r\n        nodeRefs.current[`${node.row}-${node.col}`].style.backgroundColor =\r\n          colors.lightShade\r\n        if (wallCountRef.current) {\r\n          wallCountRef.current.count -= 1\r\n          wallCountRef.current.innerHTML =\r\n            \"Count: \" + (wallCountRef.current.count ?? 0)\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isMovingStartNode && !node.isEnd) {\r\n      wallCheck()\r\n      node.isStart = true\r\n      setStartPosition([node.row, node.col])\r\n      redoAlgorithm()\r\n    } else if (isMovingEndNode && !node.isStart) {\r\n      wallCheck()\r\n      node.isEnd = true\r\n      setEndPosition([node.row, node.col])\r\n      redoAlgorithm()\r\n    }\r\n  }, [\r\n    isMovingEndNode,\r\n    isMovingStartNode,\r\n    isVisualizing,\r\n    node,\r\n    nodeRefs,\r\n    redoAlgorithm,\r\n    setEndPosition,\r\n    setStartPosition,\r\n    wallCountRef,\r\n  ])\r\n\r\n  const handleOnClick = useCallback(() => {\r\n    if (\r\n      !isMovingEndNode &&\r\n      !isMovingStartNode &&\r\n      !isVisualizing &&\r\n      !node.isEnd &&\r\n      !node.isStart\r\n    ) {\r\n      node.isWall = !node.isWall\r\n      nodeRefs.current[`${node.row}-${node.col}`].classList.remove(\r\n        \"node-shortest-path\",\r\n        \"node-visited\"\r\n      )\r\n      nodeRefs.current[\r\n        `${node.row}-${node.col}`\r\n      ].style.backgroundColor = node.isWall\r\n        ? colors.darkShade\r\n        : colors.lightShade\r\n\r\n      if (wallCountRef.current) {\r\n        if (node.isWall) wallCountRef.current.count += 1\r\n        else wallCountRef.current.count -= 1\r\n\r\n        wallCountRef.current.innerHTML =\r\n          \"Count: \" + (wallCountRef.current.count ?? 0)\r\n      }\r\n    }\r\n  }, [\r\n    isMovingEndNode,\r\n    isMovingStartNode,\r\n    isVisualizing,\r\n    node,\r\n    nodeRefs,\r\n    wallCountRef,\r\n  ])\r\n\r\n  const handleOnMouseOver = useCallback(() => {\r\n    if (\r\n      !isMovingEndNode &&\r\n      !isMovingStartNode &&\r\n      !isVisualizing &&\r\n      !node.isEnd &&\r\n      !node.isStart &&\r\n      !node.isVisited\r\n    ) {\r\n      nodeRefs.current[`${node.row}-${node.col}`].style.backgroundColor =\r\n        colors.darkShade\r\n    }\r\n  }, [\r\n    isMovingEndNode,\r\n    isMovingStartNode,\r\n    isVisualizing,\r\n    node.col,\r\n    node.isEnd,\r\n    node.isStart,\r\n    node.isVisited,\r\n    node.row,\r\n    nodeRefs,\r\n  ])\r\n\r\n  const handleOnMouseLeave = useCallback(() => {\r\n    const wallCheck = () => {\r\n      if (initalNodeWallState) {\r\n        initalNodeWallState = false\r\n        node.isWall = true\r\n        nodeRefs.current[`${node.row}-${node.col}`].style.backgroundColor =\r\n          colors.darkShade\r\n        if (wallCountRef.current) {\r\n          wallCountRef.current.count += 1\r\n          wallCountRef.current.innerHTML =\r\n            \"Count: \" + (wallCountRef.current.count ?? 0)\r\n        }\r\n      }\r\n    }\r\n    if (isMovingStartNode) {\r\n      wallCheck()\r\n      node.isStart = false\r\n      prevStartNodeRef = node\r\n    } else if (isMovingEndNode) {\r\n      wallCheck()\r\n      node.isEnd = false\r\n      prevEndNodeRef = node\r\n    } else {\r\n      if (!node.isStart && !node.isEnd && !node.isVisited) {\r\n        if (!node.isWall) {\r\n          nodeRefs.current[`${node.row}-${node.col}`].style.backgroundColor =\r\n            colors.lightShade\r\n        }\r\n      }\r\n    }\r\n  }, [isMovingEndNode, isMovingStartNode, node, nodeRefs, wallCountRef])\r\n\r\n  return (\r\n    <GridNode\r\n      col={node.col}\r\n      isEnd={node.isEnd}\r\n      isStart={node.isStart}\r\n      isWall={node.isWall}\r\n      nodeRefs={nodeRefs}\r\n      onClick={handleOnClick}\r\n      onMouseLeave={handleOnMouseLeave}\r\n      onMouseOver={handleOnMouseOver}\r\n      onMouseDown={handleOnMouseDown}\r\n      onMouseUp={handleOnMouseUp}\r\n      onMouseEnter={handleOnMouseEnter}\r\n      row={node.row}\r\n    />\r\n  )\r\n}\r\n\r\nexport default React.memo(NodeView)\r\n","import { colors } from \"../../theme\"\r\nimport { Node } from \"../../types/node\"\r\n\r\ninterface Props {\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  shortestPath: Node[]\r\n  visitedNodesInOrder: Node[]\r\n}\r\n\r\nexport const animateInstantAlgorithm = async ({\r\n  nodeRefs,\r\n  shortestPath,\r\n  visitedNodesInOrder,\r\n}: Props) => {\r\n  for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n    if (i === visitedNodesInOrder.length - 1) {\r\n      animateShortestPath({ shortestPath, nodeRefs })\r\n    } else {\r\n      nodeRefs.current[\r\n        `${visitedNodesInOrder[i].row}-${visitedNodesInOrder[i].col}`\r\n      ].style.backgroundColor = colors.darkAccent\r\n    }\r\n  }\r\n}\r\n\r\ninterface Params {\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  shortestPath: Node[]\r\n}\r\n\r\nconst animateShortestPath = ({ nodeRefs, shortestPath }: Params) => {\r\n  if (!shortestPath[shortestPath.length - 1].isEnd) {\r\n    const { row, col } = shortestPath[shortestPath.length - 1]\r\n    nodeRefs.current[`${row}-${col}`].style.backgroundColor = colors.darkAccent\r\n    return\r\n  }\r\n  for (let j = 1; j < shortestPath.length; j++) {\r\n    nodeRefs.current[\r\n      `${shortestPath[j].row}-${shortestPath[j].col}`\r\n    ].style.backgroundColor = colors.lightAccent\r\n  }\r\n}\r\n","import React, { useEffect, useState, useCallback } from \"react\"\r\nimport { Grid } from \"@material-ui/core\"\r\nimport { Div } from \"../../components\"\r\nimport { colors } from \"../../theme\"\r\nimport { Node } from \"../../types/node\"\r\nimport NodeView from \"./NodeView\"\r\nimport { animateInstantAlgorithm } from \"../../helpers/animations/animateInstantAlgorithm\"\r\nimport { preSetupAlgorithm } from \"../../helpers/algorithms/preSetupAlgorithm\"\r\nimport { createBoard } from \"../../helpers/board/createBoard\"\r\nimport { Algorithms } from \"../../types/algorithms\"\r\nimport { selectAlgorithm } from \"../../helpers/algorithms/selectAlgorithm\"\r\n\r\ninterface Props {\r\n  BOARD_COLS: number\r\n  BOARD_ROWS: number\r\n  board: Node[][]\r\n  DEFAULT_END_COL: number\r\n  DEFAULT_END_ROW: number\r\n  DEFAULT_START_COL: number\r\n  DEFAULT_START_ROW: number\r\n  endPosition: number[]\r\n  hasVisualized: boolean\r\n  isVisualizing: boolean\r\n  nodeRefs: React.MutableRefObject<{ [name: string]: any }>\r\n  selectedAlgorithm: Algorithms\r\n  setBoard: React.Dispatch<any>\r\n  setEndPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setPathDistance: React.Dispatch<React.SetStateAction<number | \"\" | \"N/A\">>\r\n  setStartPosition: React.Dispatch<React.SetStateAction<number[]>>\r\n  setUnvisitedCount: React.Dispatch<React.SetStateAction<number>>\r\n  setVisitedDistance: React.Dispatch<React.SetStateAction<number | \"\" | \"N/A\">>\r\n  startPosition: number[]\r\n  wallCountRef: React.MutableRefObject<{ [name: string]: any } | null>\r\n}\r\n\r\nconst Board: React.FC<Props> = ({\r\n  BOARD_COLS,\r\n  BOARD_ROWS,\r\n  board,\r\n  DEFAULT_END_COL,\r\n  DEFAULT_END_ROW,\r\n  DEFAULT_START_COL,\r\n  DEFAULT_START_ROW,\r\n  endPosition,\r\n  hasVisualized,\r\n  isVisualizing,\r\n  nodeRefs,\r\n  selectedAlgorithm,\r\n  setBoard,\r\n  setEndPosition,\r\n  setPathDistance,\r\n  setStartPosition,\r\n  setUnvisitedCount,\r\n  setVisitedDistance,\r\n  startPosition,\r\n  wallCountRef,\r\n}) => {\r\n  useEffect(() => {\r\n    const nodes = createBoard({\r\n      BOARD_COLS,\r\n      BOARD_ROWS,\r\n      DEFAULT_END_COL,\r\n      DEFAULT_END_ROW,\r\n      DEFAULT_START_COL,\r\n      DEFAULT_START_ROW,\r\n      nodeRefs,\r\n    })\r\n    setBoard(nodes)\r\n  }, [\r\n    BOARD_COLS,\r\n    BOARD_ROWS,\r\n    DEFAULT_END_COL,\r\n    DEFAULT_END_ROW,\r\n    DEFAULT_START_COL,\r\n    DEFAULT_START_ROW,\r\n    nodeRefs,\r\n    setBoard,\r\n  ])\r\n\r\n  const [isMovingStartNode, setIsMovingStartNode] = useState<boolean>(false)\r\n  const [isMovingEndNode, setIsMovingEndNode] = useState<boolean>(false)\r\n\r\n  const redoAlgorithm = useCallback(() => {\r\n    if (isVisualizing || !hasVisualized) return\r\n    const { startNode, endNode } = preSetupAlgorithm({\r\n      board,\r\n      DEFAULT_END_COL,\r\n      DEFAULT_END_ROW,\r\n      DEFAULT_START_COL,\r\n      DEFAULT_START_ROW,\r\n      nodeRefs,\r\n    })\r\n    const { visitedNodesInOrder, shortestPath } = selectAlgorithm({\r\n      selectedAlgorithm,\r\n      board,\r\n      endNode,\r\n      startNode,\r\n    })\r\n    setUnvisitedCount(BOARD_COLS * BOARD_ROWS - visitedNodesInOrder.length + 1)\r\n    setVisitedDistance(visitedNodesInOrder.length - 1)\r\n    if (shortestPath[shortestPath.length - 1].isEnd)\r\n      setPathDistance(shortestPath.length - 1)\r\n    else setPathDistance(\"N/A\")\r\n\r\n    animateInstantAlgorithm({ visitedNodesInOrder, shortestPath, nodeRefs })\r\n  }, [\r\n    BOARD_COLS,\r\n    BOARD_ROWS,\r\n    DEFAULT_END_COL,\r\n    DEFAULT_END_ROW,\r\n    DEFAULT_START_COL,\r\n    DEFAULT_START_ROW,\r\n    board,\r\n    hasVisualized,\r\n    isVisualizing,\r\n    nodeRefs,\r\n    selectedAlgorithm,\r\n    setPathDistance,\r\n    setUnvisitedCount,\r\n    setVisitedDistance,\r\n  ])\r\n\r\n  return (\r\n    <Div\r\n      backgroundColor={colors.lightShade}\r\n      fill\r\n      alignItemsCenter\r\n      justifyContentCenter\r\n      ph={40}\r\n      pv={16}\r\n    >\r\n      <Div style={styles.board} maxWidth={1704}>\r\n        <Grid container>\r\n          {board.map((row: Node[], rowIndex: number) => {\r\n            return (\r\n              <Grid container item key={String(rowIndex)}>\r\n                {row.map((node: Node, columnIndex: number) => {\r\n                  return (\r\n                    <NodeView\r\n                      endPosition={endPosition}\r\n                      isMovingEndNode={isMovingEndNode}\r\n                      isMovingStartNode={isMovingStartNode}\r\n                      isVisualizing={isVisualizing}\r\n                      key={String(columnIndex)}\r\n                      node={node}\r\n                      nodeRefs={nodeRefs}\r\n                      redoAlgorithm={redoAlgorithm}\r\n                      setEndPosition={setEndPosition}\r\n                      setIsMovingEndNode={setIsMovingEndNode}\r\n                      setIsMovingStartNode={setIsMovingStartNode}\r\n                      setStartPosition={setStartPosition}\r\n                      startPosition={startPosition}\r\n                      wallCountRef={wallCountRef}\r\n                    />\r\n                  )\r\n                })}\r\n              </Grid>\r\n            )\r\n          })}\r\n        </Grid>\r\n      </Div>\r\n    </Div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  board: {\r\n    boxShadow: `0 4px 16px 0 rgba(0, 0, 0, 0.3)`,\r\n  },\r\n}\r\n\r\nexport default Board\r\n","import React, { useState, useRef } from \"react\"\r\nimport { Div } from \"../components\"\r\nimport { TopBar } from \"./TopBar\"\r\nimport { InfoBar } from \"./InfoBar\"\r\nimport { Board } from \"./Board\"\r\nimport { Algorithms, MazeAlgorithms } from \"../types/algorithms\"\r\n\r\nconst DEFAULT_START_ROW = 11\r\nconst DEFAULT_START_COL = 14\r\nconst DEFAULT_END_ROW = 11\r\nconst DEFAULT_END_COL = 34\r\nconst BOARD_ROWS = 25\r\nconst BOARD_COLS = 50\r\n\r\n/* board for testing */\r\n// const DEFAULT_START_ROW = 3\r\n// const DEFAULT_START_COL = 2\r\n// const DEFAULT_END_ROW = 3\r\n// const DEFAULT_END_COL = 6\r\n// const BOARD_ROWS = 10\r\n// const BOARD_COLS = 10\r\n\r\nconst PathFinderVisualizer: React.FC = () => {\r\n  const [board, setBoard] = useState<any[any]>([[]])\r\n  const nodeRefs = useRef({})\r\n  const wallCountRef = useRef({})\r\n\r\n  const [isVisualizing, setIsVisualizing] = useState<boolean>(false)\r\n  const [hasVisualized, setHasVisualized] = useState<boolean>(false)\r\n\r\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState<Algorithms>(\r\n    \"Dijkstra\"\r\n  )\r\n  const [\r\n    selectedMazeAlgorithm,\r\n    setSelectedMazeAlgorithm,\r\n  ] = useState<MazeAlgorithms>(\"\")\r\n\r\n  const [startPosition, setStartPosition] = useState<number[]>([\r\n    DEFAULT_START_ROW,\r\n    DEFAULT_START_COL,\r\n  ])\r\n  const [endPosition, setEndPosition] = useState<number[]>([\r\n    DEFAULT_END_ROW,\r\n    DEFAULT_END_COL,\r\n  ])\r\n  const [unvisitedCount, setUnvisitedCount] = useState<number>(\r\n    BOARD_ROWS * BOARD_COLS\r\n  )\r\n  const [visitedDistance, setVisitedDistance] = useState<number | \"\" | \"N/A\">(\r\n    \"\"\r\n  )\r\n  const [pathDistance, setPathDistance] = useState<number | \"\" | \"N/A\">(\"\")\r\n\r\n  return (\r\n    <Div fill minHeight=\"100vh\" minWidth={1464} overflowX=\"auto\">\r\n      <TopBar\r\n        BOARD_COLS={BOARD_COLS}\r\n        BOARD_ROWS={BOARD_ROWS}\r\n        board={board}\r\n        DEFAULT_END_COL={DEFAULT_END_COL}\r\n        DEFAULT_END_ROW={DEFAULT_END_ROW}\r\n        DEFAULT_START_COL={DEFAULT_START_COL}\r\n        DEFAULT_START_ROW={DEFAULT_START_ROW}\r\n        hasVisualized={hasVisualized}\r\n        isVisualizing={isVisualizing}\r\n        nodeRefs={nodeRefs}\r\n        selectedAlgorithm={selectedAlgorithm}\r\n        setBoard={setBoard}\r\n        setEndPosition={setEndPosition}\r\n        setHasVisualized={setHasVisualized}\r\n        setIsVisualizing={setIsVisualizing}\r\n        setPathDistance={setPathDistance}\r\n        setSelectedAlgorithm={setSelectedAlgorithm}\r\n        setStartPosition={setStartPosition}\r\n        setUnvisitedCount={setUnvisitedCount}\r\n        setVisitedDistance={setVisitedDistance}\r\n        wallCountRef={wallCountRef}\r\n      />\r\n      <InfoBar\r\n        endPosition={endPosition}\r\n        pathDistance={pathDistance}\r\n        startPosition={startPosition}\r\n        unvisitedCount={unvisitedCount}\r\n        visitedDistance={visitedDistance}\r\n        wallCountRef={wallCountRef}\r\n      />\r\n      <Board\r\n        BOARD_COLS={BOARD_COLS}\r\n        BOARD_ROWS={BOARD_ROWS}\r\n        board={board}\r\n        DEFAULT_END_COL={DEFAULT_END_COL}\r\n        DEFAULT_END_ROW={DEFAULT_END_ROW}\r\n        DEFAULT_START_COL={DEFAULT_START_COL}\r\n        DEFAULT_START_ROW={DEFAULT_START_ROW}\r\n        endPosition={endPosition}\r\n        hasVisualized={hasVisualized}\r\n        isVisualizing={isVisualizing}\r\n        nodeRefs={nodeRefs}\r\n        selectedAlgorithm={selectedAlgorithm}\r\n        setBoard={setBoard}\r\n        setEndPosition={setEndPosition}\r\n        setPathDistance={setPathDistance}\r\n        setStartPosition={setStartPosition}\r\n        setUnvisitedCount={setUnvisitedCount}\r\n        setVisitedDistance={setVisitedDistance}\r\n        startPosition={startPosition}\r\n        wallCountRef={wallCountRef}\r\n      />\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default PathFinderVisualizer\r\n","import React from \"react\"\r\nimport { PathFinderVisualizer } from \"./PathFinderVisualizer\"\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <PathFinderVisualizer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}